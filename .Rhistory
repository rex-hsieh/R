{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.2,0.25,0.35,0.2)
)
#Find the time to travel, depending upon mode of transport
time <- switch(mode_of_transport,
car   = rlnorm(1, log(30), 0.5),
bus   = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike  = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
replicate(5,time_for_commute())
prime_factors <- list(
two = 2,
three = 3,
four = c(2, 2),
five = 5,
six   = c(2, 3),
seven = 7,
eight = c(2, 2, 2),
nine  = c(3, 3),
ten   = c(2, 5)
)
head(prime_factors)
unique_primes <- vector("list", length(prime_factors))
for(i in seq_along(prime_factors))
{
unique_primes[[i]] <- unique(prime_factors[[i]])
}
names(unique_primes) <- names(prime_factors)
unique_primes
unique_primes <- vector("list", length(prime_factors))
for(i in seq_along(prime_factors))
{
unique_primes[[i]] <- unique(prime_factors[[i]])
}
names(unique_primes) <- names(prime_factors)
unique_primes
lapply(prime_factors, unique)
vapply(prime_factors, length, numeric(1))
vapply(prime_factors, length, numeric(1))
vapply(prime_factors, length, numeric(1))
sapply(prime_factors, unique)
sapply(prime_factors, length)
sapply(prime_factors, summary)
sapply(list(), length) # the simplest output is exactly the list() function
vapply(list(), length, numeric(1))
complemented <- c(2, 3, 6, 18) #See http://oeis.org/A000614
lapply(complemented, rep.int, times = 4)
complemented <- c(2, 3, 6, 18) #See http://oeis.org/A000614
lapply(complemented, rep.int, times = 4)
complemented <- c(2, 3, 6, 18) #See http://oeis.org/A000614
lapply(complemented, rep.int, times = 4)
complemented <- c(2, 3, 6, 18) #See http://oeis.org/A000614
lapply(complemented, rep.int, times = 4)
env <- new.env()
env$molien <- c(1, 0, 1, 0, 1, 1, 2, 1, 3) #See http://oeis.org/A008584
env$larry <- c("Really", "leery", "rarely", "Larry")
eapply(env, length)
lapply(env, length)
install.packages("matlab")
library(matlab)
magic6 <- magic(6)
(magic6 <- magic(6))
apply(magic6, 1, median)
apply(magic6, 2, median)
apply(magic6, 1, quantile)
apply(magic6, 1, median) # per row
apply(magic6, 2, median) # per column
apply(magic6, 1, quantile) # per row
(baldwins <- data.frame(
name             = c("Alec", "Daniel", "Billy", "Stephen"),
date_of_birth    = c("1958-Apr-03", "1960-Oct-05", "1963-Feb-21", "1966-May-12"),
n_spouses = c(2, 3, 1, 1),
n_children = c(1, 5, 3, 2), stringsAsFactors = FALSE
))
sapply(baldwins, range)
msg <- function(name, factors){
ifelse(
length(factors) == 1,
paste(name, "is prime"),
paste(name, "has factors", toString(factors))
)
}
mapply(msg, names(prime_factors), prime_factors)
msg <- function(name, factors){
ifelse(
length(factors) == 1,
paste(name, "is prime"),
paste(name, "has factors", toString(factors))
)
}
mapply(msg, names(prime_factors), prime_factors)
baby_gender_report <- function(gender){
switch(
gender,
male   = "It's a boy!",
female = "It's a girl!",
"Um..."
)
}
vectorized_baby_gender_report <- Vectorize(baby_gender_report)
genders <- c("male", "female", "other")
vectorized_baby_gender_report(genders)
(frogger_scores <- data.frame(
player = rep(c("Tom", "Dick", "Harry"), times = c(2, 5, 3)),
score  = round(rlnorm(10, 8), -1)
))
(scores_by_player <- with(
frogger_scores,
split(score, player)
))
(list_of_means_by_player <- lapply(scores_by_player, mean))
(mean_by_player <- unlist(list_of_means_by_player))
sapply(score_by_player, mean)
(scores_by_player <- with(
frogger_scores,
split(score, player)
))
(list_of_means_by_player <- lapply(scores_by_player, mean))
(mean_by_player <- unlist(list_of_means_by_player))
sapply(score_by_player, mean)
sapply(score_by_player, mean)
sapply(score_by_player, mean)
sapply(score_by_player, mean)
sapply(score_by_player, mean)
vapply(score_by_player, mean)
(scores_by_player <- with(
frogger_scores,
split(score, player)
))
(list_of_means_by_player <- lapply(scores_by_player, mean))
(mean_by_player <- unlist(list_of_means_by_player))
vapply(scores_by_player, mean)
vapply(scores_by_player, mean())
vapply(scores_by_player, mean
vapply(scores_by_player, mean)
mean_by_player <- vapply(scores_by_player, mean)
mean_by_player <- vapply(scores_by_player, mean)
mean_by_player <- vapply(scores_by_player, mean)
mean_by_player <- vapply(scores_by_player, mean, vector(length = length(scores_by_player)))
mean_by_player <- sapply(scores_by_player, mean)
(mean_by_player <- sapply(scores_by_player, mean))
with(frogger_scores, tapply(score, player, mean))
with(frogger_scores, tapply(score, player, mean))
library(plyr)
llply(prime_factors, unique)
library(plyr)
llply(prime_factors, unique)
raply(5, runif(1)) #array output
rlply(5, runif(1)) #list output
rdply(5, runif(1)) #data frame output
r_ply(5, runif(1)) #discarded output & sometimes useful....
raply(5, runif(1)) #array output
rlply(5, runif(1)) #list output
rdply(5, runif(1)) #data frame output
r_ply(5, runif(1)) #discarded output & sometimes useful....
ddply(
frogger_scores,
.(player),
colwise(mean) #call mean on every column except player
)
ddply(
frogger_scores,
.(player),
summarize,
mean_score = mean(score), #call mean on score max_level = max(level) #... and max on level
)
ddply(
frogger_scores,
.(player),
colwise(mean) #call mean on every column except player
)
ddply(
frogger_scores,
.(player),
summarize,
mean_score = mean(score) #call mean on score max_level = max(level) #... and max on level
)
yn_to_logical <- function(x){
y <- rep.int(NA, length(x))
y[x == "Y"] <- TRUE
y[x == "N"] <- FALSE
y
}
alpe_d_huez$DrugUse <- yn_to_logical(alpe_d_huez$DrugUse)
data()
data("kidney", package = "survival")
kidney
library(learningr)
alpe_d_huez <- system.file("AirPassengers", package = "learningr")
alpe_d_huez$DrugUse <- yn_to_logical(alpe_d_huez$DrugUse)
alpe_d_huez <- system.file("AirPassengers", package = "datasets")
alpe_d_huez$DrugUse <- yn_to_logical(alpe_d_huez$DrugUse)
alpe_d_huez <- system.file("Air Passengers", package = "datasets")
alpe_d_huez$DrugUse <- yn_to_logical(alpe_d_huez$DrugUse)
help("learning")
help("learningr")
learningr
library("learningr")
install.packages("learningr")
help("learningr")
library("learningr")
help("learningr")
alpe_d_huez <- system.file("alpe_d_huez", package = "learningr")
alpe_d_huez$DrugUse <- yn_to_logical(alpe_d_huez$DrugUse)
alpe_d_huez$DrugUse <- yn_to_logical(alpe_d_huez$DrugUse)
library("learningr")
alpe_d_huez$DrugUse <- yn_to_logical(alpe_d_huez$DrugUse)
library("learningr")
learningr::alpe_d_huez2
alpe_d_huez$DrugUse <- yn_to_logical(alpe_d_huez$DrugUse)
library("learningr")
alpe_d_huez <- learningr::alpe_d_huez2
alpe_d_huez$DrugUse <- yn_to_logical(alpe_d_huez$DrugUse)
library("learningr")
alpe_d_huez <- learningr::alpe_d_huez2
alpe_d_huez$DrugUse <- yn_to_logical(alpe_d_huez$DrugUse)
alpe_d_huez
library("learningr")
alpe_d_huez <- learningr::alpe_d_huez2
alpe_d_huez
alpe_d_huez <- learningr::alpe_d_huez
alpe_d_huez
alpe_d_huez$DrugUse <- yn_to_logical(alpe_d_huez$DrugUse)
alpe_d_huez
data(english_monarchs, package = "learningr")
head(english_monarchs)
library(stringr)
multiple_kingdoms <- str_detect(english_monarchs$domain, fixed(","))
english_monarchs[multiple_kingdoms, c("name", "domain")]
english_monarchs$domain
library(stringr)
english_monarchs$domain
multiple_kingdoms <- str_detect(english_monarchs$domain, fixed(","))
english_monarchs[multiple_kingdoms, c("name", "domain")]
library(stringr)
english_monarchs$domain
multiple_kingdoms <- str_detect(english_monarchs$domain, fixed(","))
english_monarchs[multiple_kingdoms, c("name", "domain")]
